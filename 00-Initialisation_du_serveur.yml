---
- name: Configuration sudoer sans mot de passe
  hosts: all
  tags:
    - init
    - sudoers-nopassword
  become: "True"
  tasks:
    - name: On ajoute la configuration si elle n'existe pâs déjà
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/90-sudoers-nopassword"
        content: |
          %sudo ALL=(ALL) NOPASSWD: ALL

- name: Mise à jour via apt
  hosts: all
  tags:
    - apt_upgrade
  become: "True"
  tasks:
    - name: apt upgrade
      apt:
        upgrade: "True"
        update_cache: "True"
        cache_valid_time: 300

- name: Installation de starship
  hosts: all
  tags:
    - starship
  become: "True"
  tasks:
    - name: Vérification si starship est déjà installé
      stat:
        path: /usr/local/bin/starship
      register: present
    - name: Téléchargement du script d'installation de starship
      get_url:
        url: https://starship.rs/install.sh
        dest: ~/starship.sh
      when: present.stat.exists == False
    - name: Démarrage du script d'installation de starship
      ansible.builtin.command:
        cmd: bash ~/starship.sh -f
        creates: /usr/local/bin/starship
      when: present.stat.exists == False
    - name: Vérification si starship est maintenant installé
      stat:
        path: /usr/local/bin/starship
      register: present
    - name: Effaceent du script d'installation
      ignore_errors: true
      file:
        state: absent
        path: ~/starship.sh
      when: present.stat.exists
    - name: Vérification (et modification si nécessaire) du fichier /etc/skel/.bashrc
      lineinfile:
        dest: /etc/skel/.bashrc
        line: eval "$(starship init bash)"
        state: present
    - name: Copie du répertoire /etc/skel/.config/
      ansible.builtin.copy:
        src: ./files/.config/
        dest: /etc/skel/.config/

- name: Création des compte des administrateurs
  hosts: all
  tags:
    - admins
  become: "True"
  tasks:
    - name: Boucle de création des comptes
      ansible.builtin.user:
        name: "{{ item }}"
        shell: /bin/bash
        groups: users,sudo
        append: true
      loop: "{{ admins }}"
    - name: Configuration sudoer sans mot de passe
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/90-sudoers-nopassword"
        content: |
          %sudo ALL=(ALL) NOPASSWD: ALL
    - name: Importation des clés publiques des administrateurs
      authorized_key:
        user: "{{ item }}"
        state: present
        key: "https://github.com/{{ item }}.keys"
      loop: "{{ admins }}"

- name: Installation de fail2ban
  hosts: all
  tags:
    - fail2ban
  become: "True"
  tasks:
    - name: Utilisation du rôle thorian93.ansible_role_fail2ban
      include_role:
        name: thorian93.ansible_role_fail2ban

- name: Configuration du pare-feu
  hosts: all
  tags:
    - pare-feu
  become: "True"
  tasks:
    - name: Utilisation du rôle oefenweb.ufw
      include_role:
        name: oefenweb.ufw
      vars:
        ufw_rules:
          - rule: allow
            to_port: 22
            protocol: tcp
            comment: "Autoriser les connexions entrantes sur le port SSH (TCP) standard"
          - rule: allow
            to_port: 80
            protocol: tcp
            comment: "Autoriser les connexions entrantes sur le port HTTP (TCP) standard"
          - rule: allow
            to_port: 443
            protocol: tcp
            comment: "Autoriser les connexions entrantes sur le port HTTPS (TCP) standard"

- name: Mise en place /etc/hosts
  hosts: all
  tags:
    - hosts
  become: "True"
  tasks:
    - name: Utilisation du rôle arillso.hosts
      include_role:
        name: arillso.hosts

- name: Nommer le serveur
  hosts: all
  tags:
    - hostname
  become: "True"
  tasks:
    - name: Utilisation de la variable ansible_host comme nom d'hôte
      ansible.builtin.hostname:
        name: "{{ ansible_host }}"
